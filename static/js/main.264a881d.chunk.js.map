{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["ac","OfflineAudioContext","audioBuffer","playSource","loadSound","buffer","decodeAudioData","data","source","createBufferSource","splitter","createChannelSplitter","connect","merger","createChannelMerger","destination","startRendering","then","renderedBuffer","catch","err","console","log","toMono","e","NameForm","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","files","reader","FileReader","onload","result","readAsArrayBuffer","preventDefault","onSubmit","type","accept","onChange","variant","React","Component","PlayPauseButton","AudioContext","loop","start","playSound","stop","pcmFloat","getChannelData","pcmInt16","Int16Array","length","i","s","Math","max","min","alert","Button","onClick","handlePlay","handleStop","handlePCM","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.264a881d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// var ac = new AudioContext();\nvar ac = new OfflineAudioContext(1,44100*40, 44100);\nvar audioBuffer = null;\nvar playSource = null;\n\nfunction bufferToBase64 (buffer) {\n    var bytes = new Uint8Array(buffer);\n    var len = buffer.byteLength;\n    var binary = \"\";\n    for (var i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n};\n\nfunction toMono(data) {\n\n    var source = ac.createBufferSource();\n    source.buffer = data;\n\n    var splitter = ac.createChannelSplitter(2);\n    source.connect(splitter);\n\n    var merger = ac.createChannelMerger(1);\n    splitter.connect(merger, 1, 0);\n    splitter.connect(merger, 0, 0);\n\n    merger.connect(ac.destination);\n\n    ac.startRendering().then(function(renderedBuffer) {\n        /* alert('Rendering completed successfully'); */\n        /* alert(\"renderedBuffer sample rate:\" + renderedBuffer.sampleRate); */\n        /* alert(\"renderedBuffer Duration:\" + renderedBuffer.duration); */\n        /* alert(\"renderedBuffer length:\" + renderedBuffer.length); */\n        /* alert(\"renderedBuffer Number of channels:\" + renderedBuffer.numberOfChannels); */\n        audioBuffer = renderedBuffer;\n\n        }).catch(function(err) {\n          console.log('Rendering failed: ' + err);\n        });\n}\n\nfunction playSound() {\n    if (audioBuffer) {\n        var ac = new AudioContext();\n        // source is global so we can call .stop() later.\n        playSource = ac.createBufferSource();\n        playSource.buffer = audioBuffer;\n        playSource.loop = false;\n        playSource.connect(ac.destination);\n        playSource.start(0); // Play immediately.\n    }\n}\n\nfunction stopSound() {\n    if (playSource) {\n        playSource.stop(0);\n    }\n}\nfunction loadSound(buffer) {\n    ac.decodeAudioData(buffer, function (buffer) {\n        // success callback, buffer is a https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer\n        audioBuffer = buffer;\n        /* alert(\"src sample rate:\" + buffer.sampleRate); */\n        /* alert(\"src Duration:\" + buffer.duration); */\n        /* alert(\"src length:\" + buffer.length); */\n        /* alert(\"src Number of channels:\" + buffer.numberOfChannels); */\n\n        var mono = toMono(buffer)\n        /* alert(\"mono sample rate:\" + mono.sampleRate); */\n        /* alert(\"mono Duration:\" + mono.duration); */\n        /* alert(\"mono length:\" + mono.length); */\n        /* alert(\"mono Number of channels:\" + mono.numberOfChannels); */\n\n    }, function (e) {\n        console.log('Error decoding file', e);\n    });}\n\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.files[0]});\n  }\n\n  handleSubmit(event) {\n   \n    var reader = new FileReader();\n    reader.onload = function (e) {\n       loadSound(this.result)\n    };\n\n    reader.readAsArrayBuffer(this.state.value);\n\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n        Load file:\n        <input type=\"file\" accept=\"audio\" onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Load\"  variant=\"primary\" />\n      </form>\n    );\n  }\n}\n\nclass PlayPauseButton extends React.Component {\n  handlePlay() {\n      playSound();\n  }\n  handleStop() {\n      stopSound();\n  }\n  handlePCM() {\n      var pcmFloat = audioBuffer.getChannelData(0);\n      var pcmInt16 = new Int16Array(pcmFloat.length);\n      for (var i = 0; i < pcmFloat.length; i++) {\n          let s = Math.max(-1, Math.min(1, pcmFloat[i]));\n          pcmInt16[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n      }      \n      alert(pcmInt16);\n  }\n\n  render() {\n      // This syntax ensures `this` is bound within handleClick\n      return (<div>\n              <Button variant=\"primary\" onClick={() => this.handlePlay()}>Play</Button>\n              <Button variant=\"primary\" onClick={() => this.handleStop()}>Stop</Button>\n              <Button variant=\"primary\" onClick={() => this.handlePCM()}>PCM</Button>\n              </div>\n          );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NameForm />\n      <PlayPauseButton />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}